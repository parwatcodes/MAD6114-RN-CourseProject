import React, { useState } from 'react';
import IonIcon from 'react-native-vector-icons/Ionicons';
import { SelectList } from 'react-native-dropdown-select-list';
import { View, Text, StyleSheet, Pressable, TextInput, Modal, TouchableOpacity, Button } from 'react-native';
import { Toast } from 'react-native-toast-message/lib/src/Toast';

import { generatePassword, transformObject } from '../../helpers/utils';
import { borderColor, darkBlue, lightBlue, white } from '../../helpers/colors';
import { USER_ROLE } from '../../helpers/mappings';

const UserForm = (props) => {
  const { modalVisible, setModalVisible } = props;
  let userRole = transformObject(USER_ROLE);

  const [defaultOptionRole, setDefaultOptionRole] = React.useState(userRole[0]);
  const [selectedUser, setSelectedUser] = React.useState({
    fullName: '',
    email: '',
    password: '',
    role: 'admin',
    hourlyRate: ''
  });

  React.useEffect(() => {
    if (props.user) {
      setSelectedUser(props.user);

      setDefaultOptionRole({
        key: props.user.role,
        value: USER_ROLE[props.user.role]
      });
    }
  }, [props.user]);


  const handleEmailOnBlur = () => {
    if (selectedUser.email) {
      let password = generatePassword(selectedUser.email);

      setSelectedUser({
        ...selectedUser,
        password
      });
    }
  };

  const handleTextChange = (key, value) => {
    setSelectedUser({
      ...selectedUser,
      [key]: value
    });
  };

  const userModalTitle = props.user ? 'Edit a user' : 'Create a user';
  const disabledBtnBgColor = !(selectedUser.fullName && selectedUser.email) ? 'grey' : darkBlue;

  return (
    <View>
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        style={{
          backgroundColor: 'green'
        }}
        onRequestClose={() => {
          Alert.alert('Modal has been closed.');
          setModalVisible(!modalVisible);
        }}>
        <View style={styles.centeredView}>
          <View style={styles.modalView}>
            <Pressable style={{
              position: 'absolute',
              right: 15,
              top: 15
            }} onPress={() => setModalVisible(!modalVisible)}>
              <IonIcon size={40} color={'grey'} name="ios-close-circle-outline" />
            </Pressable>
            <Text style={styles.modalText}>{userModalTitle}</Text>
            <View>
              <View style={{
                marginBottom: 15
              }}>
                <Text style={styles.textLabel}>Full Name</Text>
                <TextInput
                  style={styles.textInput}
                  value={selectedUser.fullName || selectedUser.name}
                  onChangeText={(val) => handleTextChange('fullName', val)}
                />
              </View>
              <View style={{
                marginBottom: 15
              }}>
                <Text style={styles.textLabel}>Email</Text>
                <TextInput onBlur={handleEmailOnBlur} value={selectedUser.email} style={styles.textInput} onChangeText={(val) => handleTextChange('email', val)} />
              </View>
              <View style={{
                marginBottom: 15
              }}>
                <Text style={styles.textLabel}>Autogenerated password</Text>
                <TextInput style={styles.textInput} value={selectedUser.password} />
              </View>
              <View style={{
                marginBottom: 15
              }}>
                <Text style={styles.textLabel}>User role</Text>
                <SelectList
                  setSelected={(val) => handleTextChange('role', val)}
                  data={userRole}
                  defaultOption={defaultOptionRole}
                  save="key"
                  search={false}
                  boxStyles={styles.dropdownStyles}
                  dropdownStyles={styles.dropdownStyles}
                  dropdownItemStyles={styles.dropdownItemStyles}
                  dropdownTextStyles={styles.dropdownTextStyles}
                />
              </View>
              {selectedUser.role === 'member' && <View style={{
                marginBottom: 15
              }}>
                <Text style={styles.textLabel}>Hourly pay rate</Text>
                <TextInput
                  value={selectedUser.hourlyRate}
                  onChangeText={(val) => handleTextChange('hourlyRate', val)}
                  style={styles.textInput} />
              </View>}
              <TouchableOpacity
                onPress={() => props.onSave(selectedUser)}
                style={{ ...styles.doneBtnWrapper, backgroundColor: disabledBtnBgColor }}
              >
                <Text style={styles.doneText}>Done</Text>
              </TouchableOpacity>
            </View>
            <Toast
              position='top'
            />
          </View>
        </View>
      </Modal>
    </View>
  );
};

const styles = StyleSheet.create({
  centeredView: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.7)',
    marginBottom: 80,
    justifyContent: 'flex-end'
  },
  modalView: {
    margin: 20,
    backgroundColor: 'white',
    borderRadius: 20,
    padding: 40,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 4,
    elevation: 5,
  },
  button: {
    borderRadius: 20,
    padding: 10,
    elevation: 2,
  },
  buttonOpen: {
    backgroundColor: '#F194FF',
  },
  buttonClose: {
    backgroundColor: '#2196F3',
  },
  textStyle: {
    color: 'white',
    fontWeight: 'bold',
    textAlign: 'center',
  },
  modalText: {
    marginBottom: 15,
    fontSize: 18,
    fontWeight: 700
  },
  textLabel: {
    color: 'grey',
    fontSize: 14,
    fontWeight: 600,
    marginBottom: 5
  },
  textLabelDate: {
    color: 'grey',
    fontSize: 14,
    fontWeight: 600,
  },
  textInput: {
    borderWidth: 1,
    borderRadius: 5,
    height: 30,
    borderColor,
    paddingLeft: 5
  },
  doneBtnWrapper: {
    backgroundColor: darkBlue,
    borderRadius: 50,
    marginTop: 10
  },
  doneText: {
    color: white,
    paddingTop: 12,
    paddingBottom: 12,
    fontSize: 18,
    fontWeight: 600,
    textAlign: 'center'
  },
  dropdownStyles: {
    borderRadius: 5,
    borderColor,
    paddingLeft: 5,
    paddingTop: 5,
    paddingBottom: 5,
    paddingRight: 5,
  },
  dropdownItemStyles: {
    paddingBottom: 5,
    paddingTop: 5
  },
  dropdownTextStyles: {
    fontWeight: 500
  }
});

export default UserForm;
